{"version":3,"file":"static/js/485.e2dc5cb3.chunk.js","mappings":"4MAEaA,EAAOC,EAAAA,EAAAA,GAAH,+OAgBJC,EAAWD,EAAAA,EAAAA,GAAH,mP,SCcrB,EA5BmB,SAAC,GAAwC,IAAtCE,EAAqC,EAArCA,WAAYC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC1C,OACE,SAACL,EAAD,UACGG,EAAWG,KAAI,SAAAC,GAAK,OACnB,SAACL,EAAD,CAAyBM,UAAW,UAApC,UACE,SAAC,KAAD,CACEC,GAAE,UAAKL,GAAL,OAAgBG,EAAMG,IACxBC,MAAO,CAAEC,KAAMP,GACfG,UAAW,UAHb,SAKGD,EAAMM,SANIN,EAAMG,GADF,KAa1B,C,uJClBYI,EAAgBb,EAAAA,EAAAA,IAAH,qKAYbc,EAAYd,EAAAA,EAAAA,GAAH,4QAmDTe,GAlCWf,EAAAA,EAAAA,GAAH,4NAgBOA,EAAAA,EAAAA,GAAH,mPAkBIA,EAAAA,EAAAA,EAAH,2M,SC7B1B,EA7Ba,WACX,OAAoDgB,EAAAA,EAAAA,UAAS,IAA7D,eAAOC,EAAP,KAA2BC,EAA3B,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACMhB,GAAWiB,EAAAA,EAAAA,MAWjB,OATAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MACGC,MAAK,SAAAC,GAEJP,EADaO,EAEd,IACAC,OAAM,SAAAP,GAAK,OAAIC,EAASD,EAAb,GACf,GAAE,KAGD,UAACN,EAAD,YACE,SAACC,EAAD,UAAW,mBAEVK,IAAS,SAACJ,EAAD,UAAgBI,EAAMQ,WAEhC,SAACC,EAAA,EAAD,CACE1B,WAAYe,EACZd,SAAU,UACVC,SAAUA,MAIjB,C,mMChCKyB,EAAW,gCACXC,EAAU,mCAEHP,EAAW,mCAAG,6FACnBQ,EADmB,UACVF,EADU,sCAC4BC,GAD5B,UAEFE,EAAAA,EAAAA,GAAMD,GAFJ,UAGD,OADlBE,EAFmB,QAGZC,OAHY,sBAIjB,IAAIC,MAAMF,EAASC,QAJF,gCAMlBD,EAASG,KAAKC,SANI,2CAAH,qDASXC,EAAY,mCAAG,WAAMC,GAAN,gFACpBR,EADoB,UACXF,EADW,gCACqBC,EADrB,kBACsCS,GADtC,UAEHP,EAAAA,EAAAA,GAAMD,GAFH,UAGF,OADlBE,EAFoB,QAGbC,OAHa,sBAIlB,IAAIC,MAAMF,EAASC,QAJD,gCAMnBD,EAASG,KAAKC,SANK,2CAAH,sDASZG,EAAe,mCAAG,WAAM/B,GAAN,gFACvBsB,EADuB,UACdF,EADc,iBACGpB,EADH,oBACiBqB,GADjB,UAENE,EAAAA,EAAAA,GAAMD,GAFA,UAGL,OADlBE,EAFuB,QAGhBC,OAHgB,sBAIrB,IAAIC,MAAMF,EAASC,QAJE,gCAMtBD,EAASG,MANa,2CAAH,sDASfK,EAAe,mCAAG,WAAMhC,GAAN,gFACvBsB,EADuB,UACdF,EADc,kBACIpB,EADJ,4BAC0BqB,GAD1B,UAENE,EAAAA,EAAAA,GAAMD,GAFA,UAGL,OADlBE,EAFuB,QAGhBC,OAHgB,sBAIrB,IAAIC,MAAMF,EAASC,QAJE,gCAMtBD,EAASG,KAAKM,MANQ,2CAAH,sDASfC,EAAe,mCAAG,WAAMlC,GAAN,gFACvBsB,EADuB,UACdF,EADc,kBACIpB,EADJ,4BAC0BqB,GAD1B,UAENE,EAAAA,EAAAA,GAAMD,GAFA,UAGL,OADlBE,EAFuB,QAGhBC,OAHgB,sBAIrB,IAAIC,MAAMF,EAASC,QAJE,gCAMtBD,EAASG,KAAKC,SANQ,2CAAH,qD","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/Home/Home.styled.jsx","pages/Home/Home.jsx","services/apiService.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  margin-top: 10px;\n  gap: 8px;\n  list-style: inside;\n\n  @media (max-width: 1023.98px) {\n    gap: 6px;\n  }\n\n  @media (max-width: 767.98px) {\n    gap: 4px;\n  }\n`;\n\nexport const ListItem = styled.li`\n  font-size: 20px;\n  color: #4056b4;\n\n  &:hover,\n  &:focus {\n    color: #ff6b0a;\n  }\n\n  @media (max-width: 1023.98px) {\n    font-size: 16px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 12px;\n  }\n`;\n","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { List, ListItem } from './MoviesList.styled';\n\nconst MoviesList = ({ listMovies, pathLink, location }) => {\n  return (\n    <List>\n      {listMovies.map(movie => (\n        <ListItem key={movie.id} className={'content'}>\n          <Link\n            to={`${pathLink}${movie.id}`}\n            state={{ from: location }}\n            className={'content'}\n          >\n            {movie.title}\n          </Link>\n        </ListItem>\n      ))}\n    </List>\n  );\n}; // функція ListMovies повертає для рендеру розмітку компоненту ListMovies (список фільмів)\n\nMoviesList.propTypes = {\n  listMovies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    })\n  ),\n  pathLink: PropTypes.string.isRequired,\n  location: PropTypes.object.isRequired,\n}; // типізація (опис типів) пропсів функції ListMovies\n\nexport default MoviesList; // дефолтний експорт функції ListMovies\n","import styled from '@emotion/styled';\n\nexport const ContainerHome = styled.div`\n  padding: 20px;\n\n  @media (max-width: 1023.98px) {\n    padding: 16px;\n  }\n\n  @media (max-width: 767.98px) {\n    padding: 12px;\n  }\n`;\n\nexport const TitleHome = styled.h1`\n  margin-bottom: 15px;\n\n  font-size: 28px;\n  color: #4056b4;\n\n  @media (max-width: 1023.98px) {\n    margin-bottom: 22px;\n    font-size: 18px;\n  }\n\n  @media (max-width: 767.98px) {\n    margin-bottom: 16px;\n    font-size: 14px;\n  }\n`;\n\nexport const ListHome = styled.ul`\n  display: flex;\n  flex-direction: column;\n\n  list-style: inside;\n  gap: 8px;\n\n  @media (max-width: 1023.98px) {\n    gap: 6px;\n  }\n\n  @media (max-width: 767.98px) {\n    gap: 4px;\n  }\n`;\n\nexport const ListItemHome = styled.li`\n  font-size: 20px;\n  color: #4056b4;\n\n  &:hover,\n  &:focus {\n    color: #ff6b0a;\n  }\n\n  @media (max-width: 1023.98px) {\n    font-size: 16px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 12px;\n  }\n`;\n\nexport const ErrorTextHome = styled.p`\n  margin: 0;\n\n  font-size: 14px;\n  color: red;\n\n  @media (max-width: 1023.98px) {\n    font-size: 12px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 10px;\n  }\n`;","import { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { getTrending } from '../../services/apiService';\nimport MoviesList from '../../components/MoviesList/MoviesList';\n\nimport { ContainerHome, TitleHome, ErrorTextHome } from './Home.styled';\n\nconst Home = () => {\n  const [listTrendingMovies, setListTrendingMovies] = useState([]); // виклик хука listTrendingMovies створює стан error і метод setListTrendingMovies, який змінює його значення\n  const [error, setError] = useState(null); // виклик хука useState створює стан error і метод setError, який змінює його значення\n  const location = useLocation(); //стек історії навігації описаний об'єктом розташування (location) знабором властивостей, які зберігають повну інформацію про URL\n\n  useEffect(() => {\n    getTrending()\n      .then(respons => {\n        const data = respons;\n        setListTrendingMovies(data);\n      })\n      .catch(error => setError(error));\n  }, []); // при кожному рендері сторінки виконуємо запит на сервер, при позитивній відповіді додаємо її в стан listMovies\n\n  return (\n    <ContainerHome>\n      <TitleHome>Trending today</TitleHome>\n\n      {error && <ErrorTextHome>{error.message}</ErrorTextHome>}\n\n      <MoviesList\n        listMovies={listTrendingMovies}\n        pathLink={'movies/'}\n        location={location}\n      />\n    </ContainerHome>\n  );\n}; // функція Home повертає для рендеру розмітку сторінки Home (список головних трендів цього дня)\n\nexport default Home; // дефолтний експорт функції Home\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/'; // базовий URL\nconst API_KEY = 'da202acc53ecf63431320e0e34dbf559'; // ключ користувача\n\nexport const getTrending = async () => {\n  const url = `${BASE_URL}trending/movie/day?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція getTrending() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (тренди сьогоднішнього дня)\n\nexport const searchMovies = async query => {\n  const url = `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція searchMovies() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (за запитом query, список фільмів)\n\nexport const getMovieDetails = async id => {\n  const url = `${BASE_URL}movie/${id}?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (деталі фільму за запитом id фільму)\n\nexport const getMovieCredits = async id => {\n  const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.cast;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (акторів за запитом id фільму)\n\nexport const getMovieReviews = async id => {\n  const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (відгуки за запитом id фільму)\n"],"names":["List","styled","ListItem","listMovies","pathLink","location","map","movie","className","to","id","state","from","title","ContainerHome","TitleHome","ErrorTextHome","useState","listTrendingMovies","setListTrendingMovies","error","setError","useLocation","useEffect","getTrending","then","respons","catch","message","MoviesList","BASE_URL","API_KEY","url","axios","responce","status","Error","data","results","searchMovies","query","getMovieDetails","getMovieCredits","cast","getMovieReviews"],"sourceRoot":""}