{"version":3,"file":"static/js/817.ca90cf38.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/apiService.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ListCast = styled.ul`\n  display: grid;\n  align-items: center;\n  justify-content: center;\n  align-content: center;\n  grid-template-columns: 200px 200px 200px 200px;\n  grid-gap: 16px;\n  margin-top: 15px;\n  padding-bottom: 24px;\n  list-style: none;\n\n  @media (max-width: 1023.98px) {\n    grid-template-columns: 200px 200px 200px;\n    grid-gap: 12px;\n    padding-bottom: 20px;\n  }\n\n  @media (max-width: 767.98px) {\n    grid-template-columns: 200px 200px;\n    grid-gap: 8px;\n    padding-bottom: 16px;\n  }\n\n  @media (max-width: 424.98px) {\n    grid-template-columns: 200px;\n    grid-gap: 8px;\n    padding-bottom: 16px;\n  }\n`;\n\nexport const ListCastItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  padding-bottom: 10px;\n  align-items: center;\n  overflow: hidden;\n\n  text-overflow: ' [..]';\n  text-align: start;\n\n  box-shadow: 0px 1px 6px rgba(64, 86, 180, 0.08),\n    0px 1px 1px rgba(64, 86, 180, 0.16), 0px 2px 1px rgba(64, 86, 180, 0.08);\n  border-radius: 0px 0px 4px 4px;\n`;\n\nexport const ErrorTextCast = styled.p`\n  margin: 0;\n\n  font-size: 14px;\n  color: red;\n\n  @media (max-width: 1023.98px) {\n    font-size: 12px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 10px;\n  }\n`;\n\nexport const BoxImg = styled.div`\n  width: 200px;\n  height: 300px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 20px;\n\n  @media (max-width: 1023.98px) {\n    width: 200px;\n    height: 300px;\n    margin-bottom: 15px;\n  }\n\n  @media (max-width: 767.98px) {\n    width: 200px;\n    height: 300px;\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  height: 100%;\n`;\n\nexport const TextCast = styled.p`\n  margin: 0;\n\n  font-size: 16px;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n\n  @media (max-width: 1023.98px) {\n    font-size: 14px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 12px;\n  }\n`;\n\nexport const TextCastInfo = styled.p`\n  margin-top: 10px;\n\n  font-size: 16px;\n  text-align: center;\n  color: red;\n\n  @media (max-width: 1023.98px) {\n    font-size: 14px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 12px;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport Notiflix from 'notiflix';\nimport { getMovieCredits } from '../../services/apiService';\nimport defaultImg from '../../img/defaultImgActor.png'; // картинка за замовчування\nimport defaultImgFemale from '../../img/defaultImgFemale.png'; // картинка жінкиза замовчування\nimport defaultImgMale from '../../img/defaultImgMale.png'; // картинка чоловіка за замовчування\nimport {\n  ListCast,\n  ListCastItem,\n  ErrorTextCast,\n  BoxImg,\n  Img,\n  TextCast,\n  TextCastInfo,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams(); // виклик хука useParams повертає об’єкт пар ключ/значення динамічних параметрів із поточної URL-адреси, які відповідають <Route path>.\n  const [listCasts, setListCasts] = useState([]); // виклик хука useState створює стан listCasts і метод setListCasts, який змінює його значення\n  const [isLoading, setIsLoading] = useState(false); // виклик хука useState створює стан isLoading і метод setIsLoading, який змінює його значення\n  const [error, setError] = useState(null); // виклик хука useState створює стан error і метод setError, який змінює його значення\n  const URL = 'https://image.tmdb.org/t/p/w500'; // базова адреса\n\n  const defImg = gender => {\n    let imgDefault = '';\n    switch (gender) {\n      case '1':\n        imgDefault = defaultImgFemale;\n        break;\n      case '2':\n        imgDefault = defaultImgMale;\n        break;\n      default:\n        imgDefault = defaultImg;\n        break;\n    }\n    return imgDefault;\n  }; // функція defImg повертає зображення по замовчуванню (чоловік, жінка, особа без статі) в залежності від статі\n\n  useEffect(() => {\n    if (movieId !== '') {\n      try {\n        setIsLoading(true); // записуємо true в стан isLoading (показати лоадер)\n        getMovieCredits(movieId)\n          .then(respons => {\n            const data = respons;\n            setListCasts(data); // записуємо отримані дані в стан listCasts\n            setIsLoading(false); // записуємо false в стан isLoading (сховати лоадер)\n          })\n          .catch(error => {\n            setError(error); // записуємо помилку error в стан error\n            Notiflix.Notify.failure(\n              'Oops, sorry, there were problems with the download. Please try again.'\n            );\n            console.log('Error', error.message);\n          }); //передача вмісту запиту Id в фукцію \"getMovieCredits\" та очікування на відповідь; при правильній відповіді додаємо її в відповідні стани, при помилці виводимо відповідне повідомлення\n      } catch (error) {\n        setError(error); // записуємо помилку error в стан error\n        Notiflix.Notify.failure(\n          'Oops, sorry, there were problems with the download. Please try again.'\n        );\n        console.log('Error', error.message);\n      }\n    } // якщо немає Id-фільму, то запит на сервер не робимо\n  }, [movieId]); // якщо змінився Id-фільму (movieId) то виконуємо запит на сервер, при позитивній відповіді додаємо її в стан listCast\n\n  return (\n    <>\n      {isLoading && <Loader />}\n\n      {error && <ErrorTextCast>{error.message}</ErrorTextCast>}\n\n      {listCasts && listCasts.length > 0 ? (\n        <ListCast>\n          {listCasts.map(val => (\n            <ListCastItem key={val.id}>\n              <BoxImg>\n                <Img\n                  src={\n                    val.profile_path && val.profile_path !== null\n                      ? `${URL}${val.profile_path}`\n                      : defImg(val.gender)\n                  }\n                  alt={val.name ? val.name : 'actor'}\n                />\n              </BoxImg>\n              <TextCast>{val.name}</TextCast>\n              <TextCast>Character: {val.character.slice(0, 17)}</TextCast>\n              <TextCast>\n                {val.character.slice(17).length === 0\n                  ? '-'\n                  : val.character.slice(17)}\n              </TextCast>\n              <TextCast>Popularity: {val.popularity}</TextCast>\n            </ListCastItem>\n          ))}\n        </ListCast>\n      ) : (\n        <TextCastInfo>No actors for this Movie</TextCastInfo>\n      )}\n    </>\n  );\n}; // функція Cast повертає для рендеру розмітку на сторінку Movie компонента Cast (актоський склад)\n\nexport default Cast; // дефолтний експорт функції Cast\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/'; // базовий URL\nconst API_KEY = 'da202acc53ecf63431320e0e34dbf559'; // ключ користувача\n\nexport const getTrending = async () => {\n  const url = `${BASE_URL}trending/movie/day?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція getTrending() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (тренди сьогоднішнього дня)\n\nexport const searchMovies = async query => {\n  const url = `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція searchMovies() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (за запитом query, список фільмів)\n\nexport const getMovieDetails = async id => {\n  const url = `${BASE_URL}movie/${id}?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (деталі фільму за запитом id фільму)\n\nexport const getMovieCredits = async id => {\n  const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.cast;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (акторів за запитом id фільму)\n\nexport const getMovieReviews = async id => {\n  const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (відгуки за запитом id фільму)\n"],"names":["ListCast","styled","ListCastItem","ErrorTextCast","BoxImg","Img","TextCast","TextCastInfo","movieId","useParams","useState","listCasts","setListCasts","isLoading","setIsLoading","error","setError","defImg","gender","imgDefault","useEffect","getMovieCredits","then","respons","catch","Notiflix","console","log","message","Loader","length","map","val","src","profile_path","alt","name","character","slice","popularity","id","BASE_URL","API_KEY","getTrending","url","axios","responce","status","Error","data","results","searchMovies","query","getMovieDetails","cast","getMovieReviews"],"sourceRoot":""}