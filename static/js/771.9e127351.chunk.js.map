{"version":3,"file":"static/js/771.9e127351.chunk.js","mappings":"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","sources":["components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.jsx","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","services/apiService.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MovieCardBox = styled.div`\n  display: flex;\n  gap: 24px;\n\n  @media (max-width: 1023.98px) {\n    gap: 16px;\n  }\n\n  @media (max-width: 767.98px) {\n    gap: 8px;\n  }\n`;\n\nexport const BoxImg = styled.div`\n  width: 300px;\n  height: 400px;\n  margin-bottom: 20px;\n\n  @media (max-width: 1023.98px) {\n    width: 200px;\n    height: 300px;\n    margin-bottom: 15px;\n  }\n\n  @media (max-width: 767.98px) {\n    width: 100px;\n    height: 180px;\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  height: 100%;\n`;\n\nexport const BoxDescription = styled.div`\n  width: 800px;\n\n  @media (max-width: 1919.98px) {\n    width: 620px;\n  }\n\n  @media (max-width: 1023.98px) {\n    width: 520px;\n  }\n\n  @media (max-width: 767.98px) {\n    width: 290px;\n  }\n\n  @media (max-width: 424.98px) {\n    width: 200px;\n  }\n`;\n\nexport const DescriptionTitle = styled.h2`\n  margin-bottom: 12px;\n\n  font-size: 24px;\n\n  @media (max-width: 1023.98px) {\n    margin-bottom: 8px;\n\n    font-size: 18px;\n  }\n\n  @media (max-width: 767.98px) {\n    margin-bottom: 4px;\n\n    font-size: 12px;\n  }\n`;\n\nexport const DescriptionText = styled.p`\n  margin-bottom: 24px;\n\n  font-size: 18px;\n\n  @media (max-width: 1023.98px) {\n    margin-bottom: 20px;\n\n    font-size: 12px;\n  }\n\n  @media (max-width: 767.98px) {\n    margin-bottom: 16px;\n\n    font-size: 8px;\n  }\n`;\n\nexport const DescriptionSubTitle = styled.h3`\n  margin-bottom: 12px;\n\n  font-size: 20px;\n\n  @media (max-width: 1023.98px) {\n    margin-bottom: 8px;\n\n    font-size: 14px;\n  }\n\n  @media (max-width: 767.98px) {\n    margin-bottom: 4px;\n\n    font-size: 10px;\n  }\n`;\n","import {\n  MovieCardBox,\n  BoxImg,\n  Img,\n  BoxDescription,\n  DescriptionTitle,\n  DescriptionText,\n  DescriptionSubTitle,\n} from './MovieCard.styled';\n\nconst MovieCard = ({ movieDetails }) => {\n    const URL = 'https://image.tmdb.org/t/p/w500'; // базова адреса\n    const defaultImg = '../../img/defaultImg.png'; // картинка за замовчування\n    \n  return (\n    <MovieCardBox>\n      <BoxImg>\n        {movieDetails.poster_path && (\n          <Img\n            src={\n              movieDetails.poster_path\n                ? `${URL}${movieDetails.poster_path}`\n                : defaultImg\n            }\n            alt={\n              movieDetails.original_title\n                ? movieDetails.original_title\n                : 'poster'\n            }\n          />\n        )}\n      </BoxImg>\n      <BoxDescription>\n        <DescriptionTitle>\n          {movieDetails.original_title}\n          {' ('}\n          {movieDetails.release_date && movieDetails.release_date.slice(0, 4)}\n          {')'}\n        </DescriptionTitle>\n        <DescriptionText>\n          User score: {Math.round(movieDetails.vote_average * 10)}%\n        </DescriptionText>\n        <DescriptionSubTitle>Overview</DescriptionSubTitle>\n        <DescriptionText>{movieDetails.overview}</DescriptionText>\n        <DescriptionSubTitle>Genres</DescriptionSubTitle>\n        <DescriptionText>\n          {movieDetails.genres &&\n            movieDetails.genres.map(val => val.name + ' ')}\n        </DescriptionText>\n      </BoxDescription>\n    </MovieCardBox>\n  );\n}; // функція MovieCard повертає для рендеру розмітку картки фільму на сторінку Movie\n\nexport default MovieCard; // дефолтний експорт функції Cast\n","import { NavLink, Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const ContainerMovieDetails = styled.div`\n  padding: 10px;\n`;\n\nexport const ButtonBack = styled(Link)`\n  display: flex;\n  width: 100px;\n  height: 24px;\n  align-items: center;\n  justify-content: center;\n  margin: 6px auto 16px 16px;\n  padding: 2px 10px;\n\n  cursor: pointer;\n  outline: none;\n  color: #4056b4;\n  border: 2px solid #4056b4;\n  border-radius: 20px;\n\n  &:hover,\n  &:focus {\n    color: #ff6b0a;\n    border: 2px solid #ff6b0a;\n  }\n\n  @media (max-width: 1023.98px) {\n    width: 90px;\n    height: 20px;\n    padding: 2px 8px;\n    margin: 2px auto 12px 14px;\n\n    border-radius: 16px;\n  }\n\n  @media (max-width: 767.98px) {\n    width: 80px;\n    height: 18px;\n    padding: 0px 4px;\n    margin: 0px auto 6px 10px;\n\n    border-radius: 12px;\n  }\n`;\n\nexport const ButtonBackText = styled.span`\n  margin-left: 5px;\n\n  font-size: 20px;\n  line-height: 1.2;\n\n  @media (max-width: 1023.98px) {\n    font-size: 18px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 14px;\n  }\n\n  @media (min-width: 768px) {\n    margin-bottom: 2px;\n  }\n`;\n\nexport const ErrorTextMovieDetails = styled.p`\n  margin: 0;\n\n  font-size: 14px;\n  color: red;\n\n  @media (max-width: 1023.98px) {\n    font-size: 12px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 10px;\n  }\n`;\n\nexport const DescriptionSubTitle = styled.h3`\n  margin-bottom: 12px;\n\n  font-size: 20px;\n\n  @media (max-width: 1023.98px) {\n    margin-bottom: 8px;\n\n    font-size: 14px;\n  }\n\n  @media (max-width: 767.98px) {\n    margin-bottom: 4px;\n\n    font-size: 10px;\n  }\n`;\n\nexport const ListAdditionalDescr = styled.ul`\n  display: flex;\n  flex-direction: column;\n\n  list-style: inside;\n  gap: 12px;\n\n  @media (max-width: 1023.98px) {\n    gap: 8px;\n  }\n\n  @media (max-width: 767.98px) {\n    gap: 4px;\n  }\n`;\n\nexport const ListAdditionalDescrItem = styled.li`\n  line-height: 0.6;\n  color: #4056b4;\n\n  &:hover,\n  &:focus {\n    color: #ff6b0a;\n  }\n\n  &::marker {\n    margin-right: 8px;\n  }\n`;\n\nexport const ListAdditionalDescrNav = styled(NavLink)`\n  font-size: 18px;\n\n  @media (max-width: 1023.98px) {\n    font-size: 14px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 10px;\n  }\n`;\n","import { useState, useEffect, useRef, Suspense } from 'react';\nimport MovieCard from '../../components/MovieCard/MovieCard';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport Notiflix from 'notiflix';\nimport { BiArrowBack } from 'react-icons/bi';\nimport { getMovieDetails } from '../../services/apiService';\n\nimport {\n  ContainerMovieDetails,\n  ButtonBack,\n  ButtonBackText,\n  ErrorTextMovieDetails,\n  DescriptionSubTitle,\n  ListAdditionalDescr,\n  ListAdditionalDescrItem,\n  ListAdditionalDescrNav,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams(); // виклик хука useParams повертає об’єкт пар ключ/значення динамічних параметрів із поточної URL-адреси, які відповідають <Route path>.\n  const [isLoading, setIsLoading] = useState(false); // виклик хука useState створює стан isLoading і метод setIsLoading, який змінює його значення\n  const [movieDetails, setMovieDetails] = useState(null); // виклик хука useState створює стан movieDetails і метод setМovieDetails, який змінює його значення\n  const [error, setError] = useState(null); // виклик хука useState створює стан error і метод setError, який змінює його значення\n  let location = useLocation(); //  хук useLocation повертає поточний location об'єкт\n  let linkLocationReference = useRef(location.state?.from ?? '/movies'); // хук useRef повертає змінний об’єкт посилання, .current властивість якого ініціалізовано переданим аргументом ( initialValue). Повернений об’єкт зберігатиметься протягом повного життя компонента.\n\n  useEffect(() => {\n    if (movieId !== '') {\n      try {\n        setIsLoading(true); // записуємо true в стан isLoading (показати лоадер)\n        getMovieDetails(movieId)\n          .then(respons => {\n            const data = respons;\n            setMovieDetails(data); // записуємо отримані дані в стан MovieDetails\n            setIsLoading(false); // записуємо false в стан isLoading (сховати лоадер)\n\n            if (data.length === 0) {\n              Notiflix.Notify.failure(\n                'There are no movie for this request. Please try another movie.'\n              );\n            } // при пустому масиві у відповіді, виводимо відповідне повідомлення\n          })\n          .catch(error => {\n            setError(error); // записуємо помилку error в стан error\n            Notiflix.Notify.failure(\n              'Oops, sorry, there were problems with the download. Please try again.'\n            );\n            console.log('Error', error.message);\n          }); //передача вмісту запиту Id в фукцію \"setMovieDetails\" та очікування на відповідь; при правильній відповіді додаємо її в відповідні стани, при помилці виводимо відповідне повідомлення\n      } catch (error) {\n        setError(error); // записуємо помилку error в стан error\n        Notiflix.Notify.failure(\n          'Oops, sorry, there were problems with the download. Please try again.'\n        );\n        console.log('Error', error.message);\n      }\n    } // якщо немає Id-фільму, то запит на сервер не робимо\n  }, [movieId]); // якщо змінився Id-фільму (movieId) то виконуємо запит на сервер, при позитивній відповіді додаємо її в стан MovieDetails\n\n  return (\n    <ContainerMovieDetails>\n      <ButtonBack to={linkLocationReference.current}>\n        <BiArrowBack />\n        <ButtonBackText>Go back</ButtonBackText>\n      </ButtonBack>\n\n      {isLoading && <Loader />}\n\n      {error && <ErrorTextMovieDetails>{error.message}</ErrorTextMovieDetails>}\n\n      {movieDetails && (     \n        <MovieCard movieDetails={movieDetails} />\n      )}\n      \n      <DescriptionSubTitle>Additional information</DescriptionSubTitle>\n      <ListAdditionalDescr>\n        <ListAdditionalDescrItem>\n          <ListAdditionalDescrNav\n            to=\"cast\"\n            state={{ from: location.state?.from ?? '/' }}\n          >\n            Cast\n          </ListAdditionalDescrNav>\n        </ListAdditionalDescrItem>\n        <ListAdditionalDescrItem>\n          <ListAdditionalDescrNav\n            to=\"reviews\"\n            state={{ from: location.state?.from ?? '/' }}\n          >\n            Reviews\n          </ListAdditionalDescrNav>\n        </ListAdditionalDescrItem>\n      </ListAdditionalDescr>\n      <Suspense fallback={<Loader />}>\n        <Suspense>\n          <Outlet />\n        </Suspense>\n      </Suspense>\n    </ContainerMovieDetails>\n  );\n}; // функція MovieDetails повертає для рендеру розмітку сторінку MovieDetails (деталі фільму: назва, огляд, жанри)\n\nexport default MovieDetails; // дефолтний експорт функції Home\n\n// return (\n//   <ContainerMovieDetails>  // контейнер сторіки\n//     <ButtonBack to={linkLocationReference.current}>\n//       <BiArrowBack />  // svg кнопки \"повенутися назад\"\n//       <ButtonBackText>Go back</ButtonBackText>  // текст кнопки \"повенутися назад\"\n//     </ButtonBack> // кнопка \"повенутися назад\"\n\n//     {isLoading && <Loader />} // якщо йде завантаження, показуємо спіннер\n\n//     {error && <ErrorTextMovieDetails>{error.message}</ErrorTextMovieDetails>} // якщо є помилка, виводимо повідомлення з її тестом\n\n//     {movieDetails && (\n//       <MovieCard>\n//         <BoxImg>\n//           {movieDetails.poster_path && (\n//             <Img\n//               src={\n//                 movieDetails.poster_path\n//                   ? `${URL}${movieDetails.poster_path}`\n//                   : defaultImg\n//               } якщо немає посилання на зображення, завантажуємо зображення по замовчуванню\n//               alt={\n//                 movieDetails.original_title\n//                   ? movieDetails.original_title\n//                   : 'poster'\n//               } якщо немає підпису зображення, завантажуємо підпис по замовчуванню\n//             /> // рендер зображення постеру\n//           )}\n//         </BoxImg> // тумба (контейнер) малюнку\n//         <BoxDescription>\n//           <DescriptionTitle>\n//             {movieDetails.original_title}\n//             {' ('}\n//             {movieDetails.release_date && movieDetails.release_date.slice(0, 4)}\n//             {')'}\n//           </DescriptionTitle> // заголовок фільму з датою виходу\n//           <DescriptionText>\n//             User score: {Math.round(movieDetails.vote_average * 10)}%\n//           </DescriptionText> // статистика глядацького голосування\n//           <DescriptionSubTitle>Overview</DescriptionSubTitle> // заголовок огляду фільму\n//           <DescriptionText>{movieDetails.overview}</DescriptionText> // огляд фільму\n//           <DescriptionSubTitle>Genres</DescriptionSubTitle> // заголовок жанрів фільму\n//           <DescriptionText>\n//             {movieDetails.genres &&\n//               movieDetails.genres.map(val => val.name + ' ')}\n//           </DescriptionText> // жанри фільму\n//         </BoxDescription> // контейнер деталей фільму\n//       </MovieCard> // контейнер картки фільму\n//     )}\n//     <DescriptionSubTitle>Additional information</DescriptionSubTitle>\n//     <ListAdditionalDescr>\n//       <ListAdditionalDescrItem>\n//         <ListAdditionalDescrNav to=\"cast\">Cast</ListAdditionalDescrNav>\n//       </ListAdditionalDescrItem>\n//       <ListAdditionalDescrItem>\n//         <ListAdditionalDescrNav to=\"reviews\">Reviews</ListAdditionalDescrNav>\n//       </ListAdditionalDescrItem>\n//     </ListAdditionalDescr>\n//     <Suspense fallback={<Loader />}>\n//       <Outlet /> // сюди вбуде все рендеритися\n//     </Suspense>\n//   </ContainerMovieDetails>\n// );\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/'; // базовий URL\nconst API_KEY = 'da202acc53ecf63431320e0e34dbf559'; // ключ користувача\n\nexport const getTrending = async () => {\n  const url = `${BASE_URL}trending/movie/day?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція getTrending() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (тренди сьогоднішнього дня)\n\nexport const searchMovies = async query => {\n  const url = `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція searchMovies() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (за запитом query, список фільмів)\n\nexport const getMovieDetails = async id => {\n  const url = `${BASE_URL}movie/${id}?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (деталі фільму за запитом id фільму)\n\nexport const getMovieCredits = async id => {\n  const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.cast;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (акторів за запитом id фільму)\n\nexport const getMovieReviews = async id => {\n  const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (відгуки за запитом id фільму)\n"],"names":["MovieCardBox","styled","BoxImg","Img","BoxDescription","DescriptionTitle","DescriptionText","DescriptionSubTitle","movieDetails","poster_path","src","alt","original_title","release_date","slice","Math","round","vote_average","overview","genres","map","val","name","ContainerMovieDetails","ButtonBack","Link","ButtonBackText","ErrorTextMovieDetails","ListAdditionalDescr","ListAdditionalDescrItem","ListAdditionalDescrNav","NavLink","movieId","useParams","useState","isLoading","setIsLoading","setMovieDetails","error","setError","location","useLocation","linkLocationReference","useRef","state","from","useEffect","getMovieDetails","then","respons","data","length","Notiflix","catch","console","log","message","to","current","Loader","Suspense","fallback","BASE_URL","API_KEY","getTrending","url","axios","responce","status","Error","results","searchMovies","query","id","getMovieCredits","cast","getMovieReviews"],"sourceRoot":""}