{"version":3,"file":"static/js/691.e0c99d46.chunk.js","mappings":"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","sources":["pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx","services/apiService.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const ContainerMovies = styled.div`\n  padding: 10px;\n`;\n\nexport const FormContainer = styled(Form)`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  margin-left: auto;\n  margin-right: auto;\n\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n\n  @media (max-width: 1023.98px) {\n    max-width: 450px;\n  }\n\n  @media (max-width: 767.98px) {\n    max-width: 300px;\n  }\n`;\n\nexport const Input = styled(Field)`\n  display: inline-block;\n  width: 100%;\n  padding: 9px 10px;\n\n  font: inherit;\n  font-size: 20px;\n  line-height: 1;\n\n  border-top-left-radius: 12px;\n  border-bottom-left-radius: 12px;\n  border: 2px solid #4056b4;\n  outline: none;\n\n  @media (max-width: 1023.98px) {\n    padding: 8.5px 10px;\n\n    font-size: 16px;\n  }\n\n  @media (max-width: 767.98px) {\n    padding: 8px 6px;\n\n    font-size: 12px;\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 15.8px 10px;\n\n  color: #4056b4;\n  border: 2px solid #4056b4;\n  border-top-right-radius: 12px;\n  border-bottom-right-radius: 12px;\n  cursor: pointer;\n  outline: none;\n\n  &:hover,\n  &:focus {\n    color: #ff6b0a;\n    border: 2px solid #ff6b0a;\n  }\n\n  @media (max-width: 1023.98px) {\n    width: 42px;\n    height: 42px;\n    padding: 12px 10px;\n  }\n\n  @media (max-width: 767.98px) {\n    width: 36px;\n    height: 36px;\n  }\n`;\n\nexport const ButtonText = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n\nexport const ErrorTextMovies = styled(ErrorMessage)`\n  margin: 0;\n\n  font-size: 14px;\n  color: red;\n\n  @media (max-width: 1023.98px) {\n    font-size: 12px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 10px;\n  }\n`;\n\nexport const ListMovies = styled.ul`\n  display: flex;\n  flex-direction: column;\n  margin-top: 10px;\n  gap: 5px;\n  list-style: inside;\n`;\n\nexport const ListItemMovies = styled.li`\n  font-size: 14px;\n  color: #4056b4;\n\n  &:hover,\n  &:focus {\n    color: #ff6b0a;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport Notiflix from 'notiflix';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { BsSearch } from 'react-icons/bs';\nimport { searchMovies } from '../../services/apiService';\nimport {\n  ContainerMovies,\n  FormContainer,\n  Input,\n  Button,\n  ListMovies,\n  ListItemMovies,\n  ErrorTextMovies,\n  ButtonText,\n} from './Movies.styled';\n\nconst queryRegex = /^[a-zA-Zа-яА-Я]*$/; // регулярний вираз для запиту\n\nconst schema = Yup.object().shape({\n  query: Yup.string()\n    .matches(queryRegex, 'Query is not valid!')\n    .max(50, 'Too Long!')\n    .trim(),\n}); // валідація полів форми\n\nconst INITIAL_STATE = {\n  query: '',\n}; // ініціалізація полів форми\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams(); // хук useSearchParams використовується для читання та зміни рядка запиту в URL для поточного розташування. useSearchParams повертає масив із двох значень: параметри пошуку поточного розташування (searchParams) та функцію, яка може бути використана для його оновлення (setSearchParams).\n  const query = searchParams.get('query') ?? ''; // змінній query присвоюємо значення хука searchParams, якщо воно є, інакше пустий рядок\n  const [searchQuery, setSearchQuery] = useState(''); // виклик хука useState створює стан searchQuery і метод setSearchQuery, який змінює його значення\n  const [listMovies, setListMovies] = useState([]); // виклик хука useState створює стан listMovies і метод setListMovies, який змінює його значення\n  const location = useLocation(); //стек історії навігації описаний об'єктом розташування (location) знабором властивостей, які зберігають повну інформацію про URL\n  const [error, setError] = useState(null); // виклик хука useState створює стан error і метод setError, який змінює його значення\n  const [isLoading, setIsLoading] = useState(false); // виклик хука useState створює стан isLoading і метод setIsLoading, який змінює його значення\n\n  useEffect(() => {\n    if (query !== '') {\n      try {\n        setIsLoading(true); // записуємо true в стан isLoading (показати лоадер)\n        searchMovies(query)\n          .then(respons => {\n            const data = respons;\n            setListMovies(data); // записуємо отримані дані в стан listMovies\n            setIsLoading(false); // записуємо false в стан isLoading (сховати лоадер)\n\n            if (data.length === 0) {\n              Notiflix.Notify.failure(\n                'There are no movies for this request. Please try another query.'\n              );\n            } // при пустому масиві у відповіді, виводимо відповідне повідомлення\n          })\n          .catch(error => {\n            setError(error); // записуємо помилку error в стан error\n            Notiflix.Notify.failure(\n              'Oops, sorry, there were problems with the download. Please try again.'\n            );\n            console.log('Error', error.message);\n          }); //передача вмісту запиту query і номера сторінки page в фукцію \"searchMovies\" та очікування на відповідь; при правильній відповіді додаємо її в відповідні стани, при помилці виводимо відповідне повідомлення\n      } catch (error) {\n        setError(error); // записуємо помилку error в стан error\n        Notiflix.Notify.failure(\n          'Oops, sorry, there were problems with the download. Please try again.'\n        );\n        console.log('Error', error.message);\n      }\n    } // якщо поле query пусте, то запит на сервер не робимо\n  }, [query]); // якщо змінився запит (query) то виконуємо запит на сервер, при позитивній відповіді додаємо її в стан listMovies\n\n  const inputChange = e => setSearchQuery(e.target.value.toLowerCase()); // функція inputChange, при зміні інпуту записує його значення в стан searchQuery\n\n  const formSubmit = e => {\n    searchQuery && setSearchParams({ query: searchQuery });\n    e.target = '';\n  }; // функція formSubmit, записує в стан searchParams (рядка URL) значення стану searchQuery\n\n  return (\n    <ContainerMovies>\n      <Formik\n        initialValues={INITIAL_STATE}\n        validationSchema={schema}\n        onSubmit={formSubmit}\n      >\n        <FormContainer>\n          <Input\n            type=\"text\"\n            name=\"query\"\n            value={searchQuery}\n            autoComplete=\"off\"\n            autoFocus\n            onChange={inputChange}\n          />\n          <Button type=\"submit\">\n            <BsSearch />\n            <ButtonText>Search</ButtonText>\n          </Button>\n          {error && <ErrorTextMovies>{error.message}</ErrorTextMovies>}\n        </FormContainer>\n      </Formik>\n      {isLoading && <Loader />}\n      <ListMovies>\n        {listMovies.map(movie => (\n          <ListItemMovies key={movie.id} className={'content'}>\n            <Link to={`${movie.id}`} state={{ from: location }}>\n              {movie.title}\n            </Link>\n          </ListItemMovies>\n        ))}\n      </ListMovies>\n    </ContainerMovies>\n  );\n}; // функція Movies повертає для рендеру розмітку сторінку Movies (пошуковий рядок, та список знайденого за запитом) \n\nexport default Movies; // дефолтний експорт функції Home\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/'; // базовий URL\nconst API_KEY = 'da202acc53ecf63431320e0e34dbf559'; // ключ користувача\n\nexport const getTrending = async () => {\n  const url = `${BASE_URL}trending/movie/day?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція getTrending() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (тренди сьогоднішнього дня)\n\nexport const searchMovies = async query => {\n  const url = `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція searchMovies() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (за запитом query, список фільмів)\n\nexport const getMovieDetails = async id => {\n  const url = `${BASE_URL}movie/${id}?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (деталі фільму за запитом id фільму)\n\nexport const getMovieCredits = async id => {\n  const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.cast;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (акторів за запитом id фільму)\n\nexport const getMovieReviews = async id => {\n  const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (відгуки за запитом id фільму)\n"],"names":["ContainerMovies","styled","FormContainer","Form","Input","Field","Button","ButtonText","ErrorTextMovies","ErrorMessage","ListMovies","ListItemMovies","schema","Yup","shape","query","matches","max","trim","INITIAL_STATE","useSearchParams","searchParams","setSearchParams","get","useState","searchQuery","setSearchQuery","listMovies","setListMovies","location","useLocation","error","setError","isLoading","setIsLoading","useEffect","searchMovies","then","respons","data","length","Notiflix","catch","console","log","message","initialValues","validationSchema","onSubmit","e","target","type","name","value","autoComplete","autoFocus","onChange","toLowerCase","Loader","map","movie","className","to","id","state","from","title","BASE_URL","API_KEY","getTrending","url","axios","responce","status","Error","results","getMovieDetails","getMovieCredits","cast","getMovieReviews"],"sourceRoot":""}