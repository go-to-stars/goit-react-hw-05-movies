{"version":3,"file":"static/js/720.82d96bd1.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/SearchForm/SearchForm.styled.jsx","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx","services/apiService.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  margin-top: 10px;\n  gap: 8px;\n  list-style: inside;\n\n  @media (max-width: 1023.98px) {\n    gap: 6px;\n  }\n\n  @media (max-width: 767.98px) {\n    gap: 4px;\n  }\n`;\n\nexport const ListItem = styled.li`\n  font-size: 20px;\n  color: #4056b4;\n\n  &:hover,\n  &:focus {\n    color: #ff6b0a;\n  }\n\n  @media (max-width: 1023.98px) {\n    font-size: 16px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 12px;\n  }\n`;\n","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { List, ListItem } from './MoviesList.styled';\n\nconst MoviesList = ({ listMovies, pathLink, location }) => {\n  return (\n    <List>\n      {listMovies.map(movie => (\n        <ListItem key={movie.id} className={'content'}>\n          <Link\n            to={`${pathLink}${movie.id}`}\n            state={{ from: location }}\n            className={'content'}\n          >\n            {movie.title}\n          </Link>\n        </ListItem>\n      ))}\n    </List>\n  );\n}; // функція ListMovies повертає для рендеру розмітку компоненту ListMovies (список фільмів)\n\nMoviesList.propTypes = {\n  listMovies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    })\n  ),\n  pathLink: PropTypes.string.isRequired,\n  location: PropTypes.object.isRequired,\n}; // типізація (опис типів) пропсів функції ListMovies\n\nexport default MoviesList; // дефолтний експорт функції ListMovies\n","import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormContainer = styled(Form)`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  margin-left: auto;\n  margin-right: auto;\n\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n\n  @media (max-width: 1023.98px) {\n    max-width: 450px;\n  }\n\n  @media (max-width: 767.98px) {\n    max-width: 300px;\n  }\n`;\n\nexport const Input = styled(Field)`\n  display: inline-block;\n  width: 100%;\n  height: 46px;\n  padding: 0px 10px;\n\n  font: inherit;\n  font-size: 20px;\n  line-height: 1;\n\n  border-top-left-radius: 12px;\n  border-bottom-left-radius: 12px;\n  border: 2px solid #4056b4;\n  outline: none;\n\n  @media (max-width: 1023.98px) {\n    height: 40px;\n\n    font-size: 16px;\n  }\n\n  @media (max-width: 767.98px) {\n    height: 33px;\n    padding: 0px 6px;\n\n    font-size: 12px;\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 48px;\n  height: 48px;\n\n  color: #4056b4;\n  border: 2px solid #4056b4;\n  border-top-right-radius: 12px;\n  border-bottom-right-radius: 12px;\n  cursor: pointer;\n  outline: none;\n\n  &:hover,\n  &:focus {\n    color: #ff6b0a;\n    border: 2px solid #ff6b0a;\n  }\n\n  @media (max-width: 1023.98px) {\n    width: 42px;\n    height: 42px;\n  }\n\n  @media (max-width: 767.98px) {\n    width: 36px;\n    height: 36px;\n  }\n`;\n\nexport const ButtonText = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n\nexport const ErrorTextMovies = styled(ErrorMessage)`\n  margin: 0;\n\n  font-size: 14px;\n  color: red;\n\n  @media (max-width: 1023.98px) {\n    font-size: 12px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 10px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { BsSearch } from 'react-icons/bs';\n\nimport { FormContainer, Input, Button, ButtonText } from './SearchForm.styled';\n\nconst queryRegex = /^[a-zA-Zа-яА-Я]*$/; // регулярний вираз для запиту\n\nconst schema = Yup.object().shape({\n  query: Yup.string()\n    .matches(queryRegex, 'Query is not valid!')\n    .max(50, 'Too Long!')\n    .trim(),\n}); // валідація полів форми\n\nconst INITIAL_STATE = {\n  query: '',\n}; // ініціалізація полів форми\n\nconst SearchForm = ({ formSubmit, searchQuery, inputChange }) => {\n  return (\n    <Formik\n      initialValues={INITIAL_STATE}\n      validationSchema={schema}\n      onSubmit={formSubmit}\n    >\n      <FormContainer>\n        <Input\n          type=\"text\"\n          name=\"query\"\n          value={searchQuery}\n          autoComplete=\"off\"\n          autoFocus\n          onChange={inputChange}\n        />\n        <Button type=\"submit\">\n          <BsSearch />\n          <ButtonText>Search</ButtonText>\n        </Button>\n      </FormContainer>\n    </Formik>\n  );\n}; // функція SearchForm повертає для рендеру розмітку компоненту SearchForm (пошуковий рядок)\n\nSearchForm.propTypes = {\n  formSubmit: PropTypes.func.isRequired,\n  searchQuery: PropTypes.string.isRequired,\n  inputChange: PropTypes.func.isRequired,\n}; // типізація (опис типів) пропсів компоненту SearchForm\n\n\nexport default SearchForm; // дефолтний експорт функції SearchForm\n","import styled from '@emotion/styled';\nimport { ErrorMessage } from 'formik';\n\nexport const ContainerMovies = styled.div`\n  padding: 10px;\n`;\n\nexport const ErrorTextMovies = styled(ErrorMessage)`\n  margin: 0;\n\n  font-size: 14px;\n  color: red;\n\n  @media (max-width: 1023.98px) {\n    font-size: 12px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 10px;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport ListMovies from '../../components/MoviesList/MoviesList';\nimport SearchForm from '../../components/SearchForm/SearchForm';\nimport { Loader } from 'components/Loader/Loader';\nimport Notiflix from 'notiflix';\nimport { searchMovies } from '../../services/apiService';\nimport { ContainerMovies, ErrorTextMovies } from './Movies.styled';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams(); // хук useSearchParams використовується для читання та зміни рядка запиту в URL для поточного розташування. useSearchParams повертає масив із двох значень: параметри пошуку поточного розташування (searchParams) та функцію, яка може бути використана для його оновлення (setSearchParams).\n  const query = searchParams.get('query') ?? ''; // змінній query присвоюємо значення хука searchParams, якщо воно є, інакше пустий рядок\n  const [searchQuery, setSearchQuery] = useState(''); // виклик хука useState створює стан searchQuery і метод setSearchQuery, який змінює його значення\n  const [listSearchMovies, setListSearchMovies] = useState([]); // виклик хука useState створює стан listSearchMovies і метод setListSearchMovies, який змінює його значення\n  const location = useLocation(); //стек історії навігації описаний об'єктом розташування (location) знабором властивостей, які зберігають повну інформацію про URL\n  const [error, setError] = useState(null); // виклик хука useState створює стан error і метод setError, який змінює його значення\n  const [isLoading, setIsLoading] = useState(false); // виклик хука useState створює стан isLoading і метод setIsLoading, який змінює його значення\n\n  useEffect(() => {\n    if (query !== '') {\n      try {\n        setIsLoading(true); // записуємо true в стан isLoading (показати лоадер)\n        searchMovies(query)\n          .then(respons => {\n            const data = respons;\n            setListSearchMovies(data); // записуємо отримані дані в стан listMovies\n            setIsLoading(false); // записуємо false в стан isLoading (сховати лоадер)\n\n            if (data.length === 0) {\n              Notiflix.Notify.failure(\n                'There are no movies for this request. Please try another query.'\n              );\n            } // при пустому масиві у відповіді, виводимо відповідне повідомлення\n          })\n          .catch(error => {\n            setError(error); // записуємо помилку error в стан error\n            Notiflix.Notify.failure(\n              'Oops, sorry, there were problems with the download. Please try again.'\n            );\n            console.log('Error', error.message);\n          }); //передача вмісту запиту query і номера сторінки page в фукцію \"searchMovies\" та очікування на відповідь; при правильній відповіді додаємо її в відповідні стани, при помилці виводимо відповідне повідомлення\n      } catch (error) {\n        setError(error); // записуємо помилку error в стан error\n        Notiflix.Notify.failure(\n          'Oops, sorry, there were problems with the download. Please try again.'\n        );\n        console.log('Error', error.message);\n      }\n    } // якщо поле query пусте, то запит на сервер не робимо\n  }, [query]); // якщо змінився запит (query) то виконуємо запит на сервер, при позитивній відповіді додаємо її в стан listMovies\n\n  const inputChange = e => setSearchQuery(e.target.value.toLowerCase()); // функція inputChange, при зміні інпуту записує його значення в стан searchQuery\n\n  const formSubmit = e => {\n    searchQuery && setSearchParams({ query: searchQuery });\n    e.target = '';\n  }; // функція formSubmit, записує в стан searchParams (рядка URL) значення стану searchQuery\n\n  return (\n    <ContainerMovies>\n      <SearchForm\n        formSubmit={formSubmit}\n        searchQuery={searchQuery}\n        inputChange={inputChange}\n      />\n\n      {error && <ErrorTextMovies>{error.message}</ErrorTextMovies>}\n\n      {isLoading && <Loader />}\n\n      <ListMovies\n        listMovies={listSearchMovies}\n        pathLink={''}\n        location={location}\n      />\n    </ContainerMovies>\n  );\n}; // функція Movies повертає для рендеру розмітку сторінку Movies (пошуковий рядок, та список знайденого за запитом)\n\nexport default Movies; // дефолтний експорт функції Movies\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/'; // базовий URL\nconst API_KEY = 'da202acc53ecf63431320e0e34dbf559'; // ключ користувача\n\nexport const getTrending = async () => {\n  const url = `${BASE_URL}trending/movie/day?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція getTrending() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (тренди сьогоднішнього дня)\n\nexport const searchMovies = async query => {\n  const url = `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція searchMovies() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (за запитом query, список фільмів)\n\nexport const getMovieDetails = async id => {\n  const url = `${BASE_URL}movie/${id}?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (деталі фільму за запитом id фільму)\n\nexport const getMovieCredits = async id => {\n  const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.cast;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (акторів за запитом id фільму)\n\nexport const getMovieReviews = async id => {\n  const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (відгуки за запитом id фільму)\n"],"names":["List","styled","ListItem","listMovies","pathLink","location","map","movie","className","to","id","state","from","title","FormContainer","Form","Input","Field","Button","ButtonText","ErrorMessage","schema","Yup","shape","query","matches","max","trim","INITIAL_STATE","formSubmit","searchQuery","inputChange","initialValues","validationSchema","onSubmit","type","name","value","autoComplete","autoFocus","onChange","ContainerMovies","ErrorTextMovies","useSearchParams","searchParams","setSearchParams","get","useState","setSearchQuery","listSearchMovies","setListSearchMovies","useLocation","error","setError","isLoading","setIsLoading","useEffect","searchMovies","then","respons","data","length","Notiflix","catch","console","log","message","e","target","toLowerCase","Loader","BASE_URL","API_KEY","getTrending","url","axios","responce","status","Error","results","getMovieDetails","getMovieCredits","cast","getMovieReviews"],"sourceRoot":""}