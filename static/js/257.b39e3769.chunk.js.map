{"version":3,"file":"static/js/257.b39e3769.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","services/apiService.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const BoxSpinner = styled.div`\n  margin: 10px auto;\n  text-align: center;\n`;\n","import { BoxSpinner } from './Loader.styled';\nimport { RotatingLines } from 'react-loader-spinner';\nexport const Loader = () => (\n  <BoxSpinner>\n    <RotatingLines\n      strokeColor=\"#303f9f\"\n      strokeWidth=\"5\"\n      animationDuration=\"0.8\"\n      width=\"96\"\n      visible={true}\n    />\n  </BoxSpinner>\n); // повернення для рендеру розмітки завантажувача (spinner-а), тег BoxSpinner (div)\n","import { NavLink, Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const ContainerMovieDetails = styled.div`\n  padding: 10px;\n`;\n\nexport const ButtonBack = styled(Link)`\n  display: flex;\n  width: 100px;\n  height: 24px;\n  align-items: center;\n  justify-content: center;\n  margin: 6px auto 16px 16px;\n  padding: 2px 10px;  \n\n  cursor: pointer;\n  outline: none;\n  color: #4056b4;\n  border: 2px solid #4056b4;\n  border-radius: 20px;\n\n  &:hover,\n  &:focus {\n    color: #ff6b0a;\n    border: 2px solid #ff6b0a;\n  }\n\n  @media (max-width: 1023.98px) {\n    width: 90px;\n    height: 20px;\n    padding: 2px 8px;\n    margin: 2px auto 12px 14px;\n\n    border-radius: 16px;\n  }\n\n  @media (max-width: 767.98px) {\n    width: 80px;\n    height: 18px;\n    padding: 0px 4px;\n    margin: 0px auto 6px 10px;\n\n    border-radius: 12px;\n  }\n`;\n\nexport const ButtonBackText = styled.span`\n  margin-left: 5px;\n\n  font-size: 20px;\n  line-height: 1.2;\n\n  @media (max-width: 1023.98px) {\n    font-size: 18px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 14px;\n  }\n\n  @media (min-width: 768px) {\n    margin-bottom: 2px;\n  }\n`;\n\nexport const ErrorTextMovieDetails = styled.p`\n  margin: 0;\n\n  font-size: 14px;\n  color: red;\n\n  @media (max-width: 1023.98px) {\n    font-size: 12px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 10px;\n  }\n`;\n\nexport const MovieCard = styled.div`\n  display: flex;\n  gap: 24px;\n\n  @media (max-width: 1023.98px) {\n    gap: 16px;\n  }\n\n  @media (max-width: 767.98px) {\n    gap: 8px;\n  }\n`;\n\nexport const BoxImg = styled.div`\n  width: 300px;\n  height: 400px;\n  margin-bottom: 20px;\n\n  @media (max-width: 1023.98px) {\n    width: 200px;\n    height: 300px;\n    margin-bottom: 15px;\n  }\n\n  @media (max-width: 767.98px) {\n    width: 100px;\n    height: 180px;\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  height: 100%;\n`;\n\nexport const BoxDescription = styled.div`\n  width: 800px;\n\n  @media (max-width: 1919.98px) {\n    width: 620px;\n  }\n\n  @media (max-width: 1023.98px) {\n    width: 520px;\n  }\n\n  @media (max-width: 767.98px) {\n    width: 290px;\n  }\n\n  @media (max-width: 424.98px) {\n    width: 200px;\n  }\n`;\n\nexport const DescriptionTitle = styled.h2`\n  margin-bottom: 12px;\n\n  font-size: 24px;\n\n  @media (max-width: 1023.98px) {\n    margin-bottom: 8px;\n\n    font-size: 18px;\n  }\n\n  @media (max-width: 767.98px) {\n    margin-bottom: 4px;\n\n    font-size: 12px;\n  }\n`;\n\nexport const DescriptionText = styled.p`\n  margin-bottom: 24px;\n\n  font-size: 18px;\n\n  @media (max-width: 1023.98px) {\n    margin-bottom: 20px;\n\n    font-size: 12px;\n  }\n\n  @media (max-width: 767.98px) {\n    margin-bottom: 16px;\n\n    font-size: 8px;\n  }\n`;\n\nexport const DescriptionSubTitle = styled.h3`\n  margin-bottom: 12px;\n\n  font-size: 20px;\n\n  @media (max-width: 1023.98px) {\n    margin-bottom: 8px;\n\n    font-size: 14px;\n  }\n\n  @media (max-width: 767.98px) {\n    margin-bottom: 4px;\n\n    font-size: 10px;\n  }\n`;\n\nexport const ListAdditionalDescr = styled.ul`\n  display: flex;\n  flex-direction: column;\n\n  list-style: inside;\n  gap: 12px;\n\n  @media (max-width: 1023.98px) {\n    gap: 8px;\n  }\n\n  @media (max-width: 767.98px) {\n    gap: 4px;\n  }\n`;\n\nexport const ListAdditionalDescrItem = styled.li`\n  line-height: 0.6;\n  color: #4056b4;  \n\n  &:hover,\n  &:focus {\n    color: #ff6b0a;\n  }\n\n  &::marker {\n    margin-right: 8px;\n  }\n`;\n\nexport const ListAdditionalDescrNav = styled(NavLink)`\n  font-size: 18px;\n\n  @media (max-width: 1023.98px) {\n    font-size: 14px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 10px;\n  }\n`;\n","import { useState, useEffect, useRef, Suspense } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport Notiflix from 'notiflix';\nimport { BiArrowBack } from 'react-icons/bi';\nimport { getMovieDetails } from '../../services/apiService';\nimport {\n  ContainerMovieDetails,\n  ButtonBack,\n  ButtonBackText,\n  ErrorTextMovieDetails,\n  MovieCard,\n  BoxImg,\n  Img,\n  BoxDescription,\n  DescriptionTitle,\n  DescriptionText,\n  DescriptionSubTitle,\n  ListAdditionalDescr,\n  ListAdditionalDescrItem,\n  ListAdditionalDescrNav,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams(); // виклик хука useParams повертає об’єкт пар ключ/значення динамічних параметрів із поточної URL-адреси, які відповідають <Route path>.\n  const [isLoading, setIsLoading] = useState(false); // виклик хука useState створює стан isLoading і метод setIsLoading, який змінює його значення\n  const [movieDetails, setMovieDetails] = useState(null); // виклик хука useState створює стан movieDetails і метод setМovieDetails, який змінює його значення\n  const [error, setError] = useState(null); // виклик хука useState створює стан error і метод setError, який змінює його значення\n  let location = useLocation(); //  хук useLocation повертає поточний location об'єкт\n  let linkLocationReference = useRef(location.state?.from ?? '/movies'); // хук useRef повертає змінний об’єкт посилання, .current властивість якого ініціалізовано переданим аргументом ( initialValue). Повернений об’єкт зберігатиметься протягом повного життя компонента.\n  const URL = 'https://image.tmdb.org/t/p/w500'; // базова адреса\n  const defaultImg = '../../img/defaultImg.png'; // картинка за замовчування\n\n  useEffect(() => {\n    if (movieId !== '') {\n      try {\n        setIsLoading(true); // записуємо true в стан isLoading (показати лоадер)\n        getMovieDetails(movieId)\n          .then(respons => {\n            const data = respons;\n            setMovieDetails(data); // записуємо отримані дані в стан MovieDetails\n            setIsLoading(false); // записуємо false в стан isLoading (сховати лоадер)\n\n            if (data.length === 0) {\n              Notiflix.Notify.failure(\n                'There are no movie for this request. Please try another movie.'\n              );\n            } // при пустому масиві у відповіді, виводимо відповідне повідомлення\n          })\n          .catch(error => {\n            setError(error); // записуємо помилку error в стан error\n            Notiflix.Notify.failure(\n              'Oops, sorry, there were problems with the download. Please try again.'\n            );\n            console.log('Error', error.message);\n          }); //передача вмісту запиту Id в фукцію \"setMovieDetails\" та очікування на відповідь; при правильній відповіді додаємо її в відповідні стани, при помилці виводимо відповідне повідомлення\n      } catch (error) {\n        setError(error); // записуємо помилку error в стан error\n        Notiflix.Notify.failure(\n          'Oops, sorry, there were problems with the download. Please try again.'\n        );\n        console.log('Error', error.message);\n      }\n    } // якщо немає Id-фільму, то запит на сервер не робимо\n  }, [movieId]); // якщо змінився Id-фільму (movieId) то виконуємо запит на сервер, при позитивній відповіді додаємо її в стан MovieDetails\n\n  return (\n    <ContainerMovieDetails>\n      <ButtonBack to={linkLocationReference.current}>\n        <BiArrowBack />\n        <ButtonBackText>Go back</ButtonBackText>\n      </ButtonBack>\n\n      {isLoading && <Loader />}\n\n      {error && <ErrorTextMovieDetails>{error.message}</ErrorTextMovieDetails>}\n\n      {movieDetails && (\n        <MovieCard>\n          <BoxImg>\n            {movieDetails.poster_path && (\n              <Img\n                src={\n                  movieDetails.poster_path\n                    ? `${URL}${movieDetails.poster_path}`\n                    : defaultImg\n                }\n                alt={\n                  movieDetails.original_title\n                    ? movieDetails.original_title\n                    : 'poster'\n                }\n              />\n            )}\n          </BoxImg>\n          <BoxDescription>\n            <DescriptionTitle>\n              {movieDetails.original_title}\n              {' ('}\n              {movieDetails.release_date &&\n                movieDetails.release_date.slice(0, 4)}\n              {')'}\n            </DescriptionTitle>\n            <DescriptionText>\n              User score: {Math.round(movieDetails.vote_average * 10)}%\n            </DescriptionText>\n            <DescriptionSubTitle>Overview</DescriptionSubTitle>\n            <DescriptionText>{movieDetails.overview}</DescriptionText>\n            <DescriptionSubTitle>Genres</DescriptionSubTitle>\n            <DescriptionText>\n              {movieDetails.genres &&\n                movieDetails.genres.map(val => val.name + ' ')}\n            </DescriptionText>\n          </BoxDescription>\n        </MovieCard>\n      )}\n      <DescriptionSubTitle>Additional information</DescriptionSubTitle>\n      <ListAdditionalDescr>\n        <ListAdditionalDescrItem>\n          <ListAdditionalDescrNav\n            to=\"cast\"\n            state={{ from: location.state?.from ?? '/' }}\n          >\n            Cast\n          </ListAdditionalDescrNav>\n        </ListAdditionalDescrItem>\n        <ListAdditionalDescrItem>\n          <ListAdditionalDescrNav\n            to=\"reviews\"\n            state={{ from: location.state?.from ?? '/' }}\n          >\n            Reviews\n          </ListAdditionalDescrNav>\n        </ListAdditionalDescrItem>\n      </ListAdditionalDescr>\n      <Suspense fallback={<Loader />}>\n        <Suspense>\n          <Outlet />\n        </Suspense>\n      </Suspense>\n    </ContainerMovieDetails>\n  );\n};\n\nexport default MovieDetails;\n\n// return (\n//   <ContainerMovieDetails>  // контейнер сторіки\n//     <ButtonBack to={linkLocationReference.current}>\n//       <BiArrowBack />  // svg кнопки \"повенутися назад\"\n//       <ButtonBackText>Go back</ButtonBackText>  // текст кнопки \"повенутися назад\"\n//     </ButtonBack> // кнопка \"повенутися назад\"\n\n//     {isLoading && <Loader />} // якщо йде завантаження, показуємо спіннер\n\n//     {error && <ErrorTextMovieDetails>{error.message}</ErrorTextMovieDetails>} // якщо є помилка, виводимо повідомлення з її тестом\n\n//     {movieDetails && (\n//       <MovieCard>\n//         <BoxImg>\n//           {movieDetails.poster_path && (\n//             <Img\n//               src={\n//                 movieDetails.poster_path\n//                   ? `${URL}${movieDetails.poster_path}`\n//                   : defaultImg\n//               } якщо немає посилання на зображення, завантажуємо зображення по замовчуванню\n//               alt={\n//                 movieDetails.original_title\n//                   ? movieDetails.original_title\n//                   : 'poster'\n//               } якщо немає підпису зображення, завантажуємо підпис по замовчуванню\n//             /> // рендер зображення постеру\n//           )}\n//         </BoxImg> // тумба (контейнер) малюнку\n//         <BoxDescription>\n//           <DescriptionTitle>\n//             {movieDetails.original_title}\n//             {' ('}\n//             {movieDetails.release_date && movieDetails.release_date.slice(0, 4)}\n//             {')'}\n//           </DescriptionTitle> // заголовок фільму з датою виходу\n//           <DescriptionText>\n//             User score: {Math.round(movieDetails.vote_average * 10)}%\n//           </DescriptionText> // статистика глядацького голосування\n//           <DescriptionSubTitle>Overview</DescriptionSubTitle> // заголовок огляду фільму\n//           <DescriptionText>{movieDetails.overview}</DescriptionText> // огляд фільму\n//           <DescriptionSubTitle>Genres</DescriptionSubTitle> // заголовок жанрів фільму\n//           <DescriptionText>\n//             {movieDetails.genres &&\n//               movieDetails.genres.map(val => val.name + ' ')}\n//           </DescriptionText> // жанри фільму\n//         </BoxDescription> // контейнер деталей фільму\n//       </MovieCard> // контейнер картки фільму\n//     )}\n//     <DescriptionSubTitle>Additional information</DescriptionSubTitle>\n//     <ListAdditionalDescr>\n//       <ListAdditionalDescrItem>\n//         <ListAdditionalDescrNav to=\"cast\">Cast</ListAdditionalDescrNav>\n//       </ListAdditionalDescrItem>\n//       <ListAdditionalDescrItem>\n//         <ListAdditionalDescrNav to=\"reviews\">Reviews</ListAdditionalDescrNav>\n//       </ListAdditionalDescrItem>\n//     </ListAdditionalDescr>\n//     <Suspense fallback={<Loader />}>\n//       <Outlet />\n//     </Suspense>\n//   </ContainerMovieDetails>\n// );\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/'; // базовий URL\nconst API_KEY = 'da202acc53ecf63431320e0e34dbf559'; // ключ користувача\n\nconst requestParams = new URLSearchParams({\n  image_type: 'photo',\n  orientation: 'horizontal',\n  safesearch: 'true',\n  per_page: 12,\n}); // параметри запиту\n\nexport const fetchPictures = async (query, page) => {\n  const url = `${BASE_URL}?api_key=${API_KEY}&q=${query}&${requestParams}&page=${page}`;\n\n  const responce = await axios(url);\n\n  // .get(`${BASE_URL}trending/movie/day?api_key=${API_KEY}`)\n  //       .then(({ data }) => setListMovies(data.results))\n  //       .catch(error => setError(error));\n\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n\n  return responce.data.hits;\n}; // асинхронна фукція fetchPictures() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних\n\nexport const getTrending = async () => {\n  const url = `${BASE_URL}trending/movie/day?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція getTrending() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (тренди сьогоднішнього дня)\n\nexport const searchMovies = async query => {\n  const url = `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція searchMovies() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (за запитом query)\n\nexport const getMovieDetails = async id => {\n  const url = `${BASE_URL}movie/${id}?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (за запитом id фільму)\n\nexport const getMovieCredits = async id => {\n  const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.cast;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (за запитом id фільму)\n\nexport const getMovieReviews = async id => {\n  const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (за запитом id фільму)\n"],"names":["BoxSpinner","styled","Loader","strokeColor","strokeWidth","animationDuration","width","visible","ContainerMovieDetails","ButtonBack","Link","ButtonBackText","ErrorTextMovieDetails","MovieCard","BoxImg","Img","BoxDescription","DescriptionTitle","DescriptionText","DescriptionSubTitle","ListAdditionalDescr","ListAdditionalDescrItem","ListAdditionalDescrNav","NavLink","movieId","useParams","useState","isLoading","setIsLoading","movieDetails","setMovieDetails","error","setError","location","useLocation","linkLocationReference","useRef","state","from","useEffect","getMovieDetails","then","respons","data","length","Notiflix","catch","console","log","message","to","current","poster_path","src","alt","original_title","release_date","slice","Math","round","vote_average","overview","genres","map","val","name","Suspense","fallback","BASE_URL","API_KEY","getTrending","URLSearchParams","image_type","orientation","safesearch","per_page","url","axios","responce","status","Error","results","searchMovies","query","id","getMovieCredits","cast","getMovieReviews"],"sourceRoot":""}