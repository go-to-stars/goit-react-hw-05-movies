{"version":3,"file":"static/js/387.846ee0ad.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/apiService.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const BoxSpinner = styled.div`\n  margin: 10px auto;\n  text-align: center;\n`;\n","import { BoxSpinner } from './Loader.styled';\nimport { RotatingLines } from 'react-loader-spinner';\nexport const Loader = () => (\n  <BoxSpinner>\n    <RotatingLines\n      strokeColor=\"#303f9f\"\n      strokeWidth=\"5\"\n      animationDuration=\"0.8\"\n      width=\"96\"\n      visible={true}\n    />\n  </BoxSpinner>\n); // повернення для рендеру розмітки завантажувача (spinner-а), тег BoxSpinner (div)\n","import styled from '@emotion/styled';\n\nexport const ListReviews = styled.ul`\n  margin-top: 10px;\n  list-style: none;\n`;\n\nexport const ListReviewsItem = styled.li`\n  margin-top: 10px;\n  min-height: 94px;\n\n  @media (max-width: 1023.98px) {\n    min-height: 80px;\n  }\n\n  @media (max-width: 767.98px) {\n    min-height: 64px;\n  }\n`;\n\nexport const ErrorTextReviews = styled.p`\n  margin-top: 10px;\n\n  font-size: 14px;\n  color: red;\n\n  @media (max-width: 1023.98px) {\n    font-size: 12px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 10px;\n  }\n`;\n\nexport const AutorReview = styled.h2`\n  margin-bottom: 12px;\n\n  font-size: 20px;\n\n  @media (max-width: 1023.98px) {\n    margin-bottom: 8px;\n\n    font-size: 14px;\n  }\n\n  @media (max-width: 767.98px) {\n    margin-bottom: 4px;\n\n    font-size: 10px;\n  }\n`;\n\nexport const TextReview = styled.p`\n  margin-bottom: 24px;\n\n  font-size: 18px;\n\n  @media (max-width: 1023.98px) {\n    margin-bottom: 20px;\n\n    font-size: 12px;\n  }\n\n  @media (max-width: 767.98px) {\n    margin-bottom: 16px;\n\n    font-size: 8px;\n  }\n`;\n\nexport const ReviewCard = styled.div``;\n\nexport const BoxImg = styled.div`\n  width: 60px;\n  height: 90px;\n  float: left;\n  margin-right: 20px;\n  margin-bottom: 4px;\n\n  @media (max-width: 1023.98px) {\n    width: 50px;\n    height: 75px;\n    margin-right: 16px;\n  }\n\n  @media (max-width: 767.98px) {\n    width: 40px;\n    height: 60px;\n    margin-right: 12px;\n  }\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  height: 100%;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport Notiflix from 'notiflix';\nimport { getMovieReviews } from '../../services/apiService';\nimport defaultImg from '../../img/defaultImgActor.png'; // картинка за замовчування\nimport {\n  ListReviews,\n  ListReviewsItem,\n  ErrorTextReviews,\n  ReviewCard,\n  BoxImg,\n  Img,\n  AutorReview,\n  TextReview,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [listReviews, setListReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // виклик хука useState створює стан isLoading і метод setIsLoading, який змінює його значення\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (movieId !== '') {\n      try {\n        setIsLoading(true); // записуємо true в стан isLoading (показати лоадер)\n        getMovieReviews(movieId)\n          .then(respons => {\n            const data = respons;\n            setListReviews(data); // записуємо отримані дані в стан MovieDetails\n            setIsLoading(false); // записуємо false в стан isLoading (сховати лоадер)\n          })\n          .catch(error => {\n            setError(error); // записуємо помилку error в стан error\n            Notiflix.Notify.failure(\n              'Oops, sorry, there were problems with the download. Please try again.'\n            );\n            console.log('Error', error.message);\n          }); //передача вмісту запиту Id в фукцію \"setMovieDetails\" та очікування на відповідь; при правильній відповіді додаємо її в відповідні стани, при помилці виводимо відповідне повідомлення\n      } catch (error) {\n        setError(error); // записуємо помилку error в стан error\n        Notiflix.Notify.failure(\n          'Oops, sorry, there were problems with the download. Please try again.'\n        );\n        console.log('Error', error.message);\n      }\n    } // якщо немає Id, то запит на сервер не робимо\n  }, [movieId]); // якщо змінився Id-фільму (movieId) то виконуємо запит на сервер, при позитивній відповіді додаємо її в стан MovieDetails\n  console.log(listReviews);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n\n      {error && <ErrorTextReviews>{error.message}</ErrorTextReviews>}\n\n      <ListReviews>\n        {listReviews.length > 0 ? (\n          listReviews.map(val => (\n            <ListReviewsItem key={val.id}>\n              <ReviewCard>\n                <BoxImg>\n                  <Img\n                    src={\n                      val.author_details.avatar_path &&\n                      val.author_details.avatar_path !== null\n                        ? val.author_details.avatar_path.substring(1)\n                        : defaultImg\n                    }\n                    alt={val.author ? val.author : 'author'}\n                  />\n                </BoxImg>\n                <AutorReview>Author: {val.author}</AutorReview>\n                <TextReview>{val.content}</TextReview>\n              </ReviewCard>\n              {/* <AutorReview>Author: {val.author}</AutorReview>\n              <TextReview>{val.content}</TextReview> */}\n            </ListReviewsItem>\n          ))\n        ) : (\n          <p>We don't have any reviews for this movie.</p>\n        )}\n      </ListReviews>\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/'; // базовий URL\nconst API_KEY = 'da202acc53ecf63431320e0e34dbf559'; // ключ користувача\n\nconst requestParams = new URLSearchParams({\n  image_type: 'photo',\n  orientation: 'horizontal',\n  safesearch: 'true',\n  per_page: 12,\n}); // параметри запиту\n\nexport const fetchPictures = async (query, page) => {\n  const url = `${BASE_URL}?api_key=${API_KEY}&q=${query}&${requestParams}&page=${page}`;\n\n  const responce = await axios(url);\n\n  // .get(`${BASE_URL}trending/movie/day?api_key=${API_KEY}`)\n  //       .then(({ data }) => setListMovies(data.results))\n  //       .catch(error => setError(error));\n\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n\n  return responce.data.hits;\n}; // асинхронна фукція fetchPictures() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних\n\nexport const getTrending = async () => {\n  const url = `${BASE_URL}trending/movie/day?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція getTrending() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (тренди сьогоднішнього дня)\n\nexport const searchMovies = async query => {\n  const url = `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція searchMovies() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (за запитом query)\n\nexport const getMovieDetails = async id => {\n  const url = `${BASE_URL}movie/${id}?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (за запитом id фільму)\n\nexport const getMovieCredits = async id => {\n  const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.cast;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (за запитом id фільму)\n\nexport const getMovieReviews = async id => {\n  const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n  const responce = await axios(url);\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  } // якщо статус відповіді не дорівнює 200 (успішний запит), то прокидаємо помилку з цим статусом\n  return responce.data.results;\n}; // асинхронна фукція getMovieDetails() очікує та повертає, за допомогою бібліотеки \"axios\", проміс отриманих даних (за запитом id фільму)\n"],"names":["BoxSpinner","styled","Loader","strokeColor","strokeWidth","animationDuration","width","visible","ListReviews","ListReviewsItem","ErrorTextReviews","AutorReview","TextReview","ReviewCard","BoxImg","Img","movieId","useParams","useState","listReviews","setListReviews","isLoading","setIsLoading","error","setError","useEffect","getMovieReviews","then","respons","catch","Notiflix","console","log","message","length","map","val","src","author_details","avatar_path","substring","defaultImg","alt","author","content","id","BASE_URL","API_KEY","getTrending","URLSearchParams","image_type","orientation","safesearch","per_page","url","axios","responce","status","Error","data","results","searchMovies","query","getMovieDetails","getMovieCredits","cast"],"sourceRoot":""}